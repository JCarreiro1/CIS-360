import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[][] graph1 = {
                {0, 999, 45, 999, 10, 28, 999, 999, 25, 999},
                {999, 0, 32, 999, 17, 999, 999, 999, 999, 999},
                {45, 32, 0, 999, 999, 999, 999, 999, 999, 999},
                {999, 999, 999, 0, 18, 999, 5, 999, 999, 999},
                {10, 17, 999, 18, 0, 999, 999, 3, 999, 999},
                {28, 999, 999, 999, 999, 0, 999, 999, 999, 6},
                {999, 999, 999, 5, 999, 999, 0, 59, 999, 999},
                {999, 999, 999, 999, 3, 999, 59, 0, 4, 999},
                {25, 999, 999, 999, 999, 999, 999, 4, 0, 12},
                {999, 999, 999, 999, 999, 6, 999, 999, 12, 0}
        };

        int[][] graph2 = {
                {0, 12, 999, 999, 999, 999, 999, 999, 999, 25, 999, 95, 999, 999, 999},
                {999, 0, 16, 999, 999, 60, 999, 999, 999, 999, 999, 66, 999, 999, 999},
                {91, 999, 0, 86, 999, 999, 999, 46, 999, 30, 999, 999, 58, 999, 999},
                {999, 999, 87, 0, 2, 69, 31, 999, 999, 999, 999, 999, 999, 999, 999},
                {999, 999, 999, 999, 0, 11, 999, 999, 999, 48, 999, 999, 999, 999, 999},
                {999, 999, 49, 999, 21, 0, 6, 85, 999, 999, 999, 999, 999, 999, 92},
                {999, 999, 999, 999, 999, 999, 0, 85, 999, 999, 8, 999, 999, 999, 999},
                {999, 999, 999, 84, 999, 999, 999, 0, 31, 999, 999, 999, 999, 48, 999},
                {999, 999, 999, 999, 999, 999, 999, 999, 0, 12, 999, 999, 999, 33, 999},
                {999, 999, 999, 12, 999, 999, 999, 999, 999, 0, 16, 55, 44, 999, 999},
                {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 0, 55, 60, 999, 999},
                {999, 999, 13, 999, 999, 999, 999, 19, 999, 72, 999, 0, 8, 999, 5},
                {999, 999, 999, 999, 16, 999, 999, 999, 999, 999, 999, 999, 0, 44, 999},
                {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 0, 1},
                {999, 999, 999, 11, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 0}
        };

        int[][] graph3 = {
                {0, 999, 40, 999, 77, 30, 999, 73, 999, 999, 999, 33, 13, 48, 25},
                {999, 0, 57, 35, 95, 65, 38, 999, 19, 999, 999, 26, 5, 999, 60},
                {999, 94, 0, 68, 999, 18, 999, 999, 80, 999, 999, 999, 28, 999, 999},
                {999, 999, 16, 0, 999, 64, 2, 95, 999, 999, 60, 999, 999, 53, 999},
                {13, 14, 999, 999, 0, 999, 999, 19, 999, 999, 69, 63, 18, 999, 999},
                {34, 999, 57, 25, 999, 0, 999, 91, 14, 99, 999, 10, 22, 98, 999},
                {999, 999, 73, 29, 999, 83, 0, 96, 43, 20, 83, 999, 46, 91, 999},
                {48, 999, 4, 32, 999, 999, 999, 0, 999, 97, 999, 999, 96, 999, 63},
                {61, 999, 999, 52, 999, 81, 97, 39, 0, 999, 28, 52, 999, 84, 999},
                {32, 80, 96, 26, 16, 999, 999, 20, 96, 0, 999, 7, 999, 93, 999},
                {999, 76, 999, 95, 999, 71, 16, 999, 57, 999, 0, 16, 41, 6, 999},
                {999, 28, 999, 999, 8, 999, 999, 999, 9, 999, 999, 0, 16, 79, 42},
                {999, 3, 999, 61, 999, 999, 999, 91, 999, 999, 71, 999, 0, 35, 999},
                {31, 37, 62, 35, 999, 31, 999, 49, 45, 999, 999, 6, 999, 0, 93},
                {999, 43, 999, 98, 27, 999, 999, 64, 99, 999, 999, 19, 31, 999, 0}
        };

        long start, end;

//        start = System.nanoTime();
//        dijkstra(10, 5, graph1);
//        end = System.nanoTime();
//        System.out.println("Run Time: " + (end - start));

        start = System.nanoTime();
        dijkstra(15, 1, graph2);
        end = System.nanoTime();
        System.out.println("Run Time: " + (end - start));

//        start = System.nanoTime();
//        dijkstra(15, 5, graph3);
//        end = System.nanoTime();
//        System.out.println("Run Time: " + (end - start));
    }

    public static void dijkstra(int n, int vStart, int[][] W){
        int vnear = 0, edge, min;
        int[] touch = new int[n];
        int[] length = new int[n];
        int[] temp = new int[n];
        int[][] WSwapped = W;

        temp = WSwapped[0];
        WSwapped[0] = W[vStart - 1];
        WSwapped[vStart - 1] = temp;

        touch[vStart - 1] = 0;
        length[vStart - 1] = -1;

        for(int i  = 0; i < n; i++){
            if(i == vStart - 1)
                continue;
            touch[i] = vStart;
            length[i] = WSwapped[0][i];
        }

        for(int i = 0; i < n - 1; i++){

            min = 999;

            for(int j = 0; j < n; j++) {
                if(j == vStart - 1)
                    continue;

                if (length[j] >= 0 && length[j] < min) {
                    min = length[j];
                    vnear = j;
                }
            }

            for(int j = 0; j < n; j++){
                if(j == vStart - 1)
                    continue;

                if(length[vnear] + W[vnear][j] < length[j]){
                    length[j] = length[vnear] + W[vnear][j];
                    touch[j] = vnear;
                }
            }

            System.out.println("The shortest path from " + vStart + " to " + (vnear + 1) + " is length " + length[vnear]);
            length[vnear] = -1;
        }

        System.out.println("\nLength array: " + Arrays.toString(length));
        System.out.println("Touch array: " + Arrays.toString(touch));
    }
}
